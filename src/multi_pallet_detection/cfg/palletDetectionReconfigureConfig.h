//#line 2 "/opt/ros/noetic/share/dynamic_reconfigure/cmake/../templates/ConfigType.h.template"
// *********************************************************
//
// File autogenerated for the multi_pallet_detection package
// by the dynamic_reconfigure package.
// Please do not edit.
//
// ********************************************************/

#ifndef __multi_pallet_detection__PALLETDETECTIONRECONFIGURECONFIG_H__
#define __multi_pallet_detection__PALLETDETECTIONRECONFIGURECONFIG_H__

#if __cplusplus >= 201103L
#define DYNAMIC_RECONFIGURE_FINAL final
#else
#define DYNAMIC_RECONFIGURE_FINAL
#endif

#include <dynamic_reconfigure/config_tools.h>
#include <limits>
#include <ros/node_handle.h>
#include <dynamic_reconfigure/ConfigDescription.h>
#include <dynamic_reconfigure/ParamDescription.h>
#include <dynamic_reconfigure/Group.h>
#include <dynamic_reconfigure/config_init_mutex.h>
#include <boost/any.hpp>

namespace multi_pallet_detection
{
  class palletDetectionReconfigureConfigStatics;

  class palletDetectionReconfigureConfig
  {
  public:
    class AbstractParamDescription : public dynamic_reconfigure::ParamDescription
    {
    public:
      AbstractParamDescription(std::string n, std::string t, uint32_t l,
          std::string d, std::string e)
      {
        name = n;
        type = t;
        level = l;
        description = d;
        edit_method = e;
      }
      virtual ~AbstractParamDescription() = default;

      virtual void clamp(palletDetectionReconfigureConfig &config, const palletDetectionReconfigureConfig &max, const palletDetectionReconfigureConfig &min) const = 0;
      virtual void calcLevel(uint32_t &level, const palletDetectionReconfigureConfig &config1, const palletDetectionReconfigureConfig &config2) const = 0;
      virtual void fromServer(const ros::NodeHandle &nh, palletDetectionReconfigureConfig &config) const = 0;
      virtual void toServer(const ros::NodeHandle &nh, const palletDetectionReconfigureConfig &config) const = 0;
      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, palletDetectionReconfigureConfig &config) const = 0;
      virtual void toMessage(dynamic_reconfigure::Config &msg, const palletDetectionReconfigureConfig &config) const = 0;
      virtual void getValue(const palletDetectionReconfigureConfig &config, boost::any &val) const = 0;
    };

    typedef boost::shared_ptr<AbstractParamDescription> AbstractParamDescriptionPtr;
    typedef boost::shared_ptr<const AbstractParamDescription> AbstractParamDescriptionConstPtr;

    // Final keyword added to class because it has virtual methods and inherits
    // from a class with a non-virtual destructor.
    template <class T>
    class ParamDescription DYNAMIC_RECONFIGURE_FINAL : public AbstractParamDescription
    {
    public:
      ParamDescription(std::string a_name, std::string a_type, uint32_t a_level,
          std::string a_description, std::string a_edit_method, T palletDetectionReconfigureConfig::* a_f) :
        AbstractParamDescription(a_name, a_type, a_level, a_description, a_edit_method),
        field(a_f)
      {}

      T palletDetectionReconfigureConfig::* field;

      virtual void clamp(palletDetectionReconfigureConfig &config, const palletDetectionReconfigureConfig &max, const palletDetectionReconfigureConfig &min) const override
      {
        if (config.*field > max.*field)
          config.*field = max.*field;

        if (config.*field < min.*field)
          config.*field = min.*field;
      }

      virtual void calcLevel(uint32_t &comb_level, const palletDetectionReconfigureConfig &config1, const palletDetectionReconfigureConfig &config2) const override
      {
        if (config1.*field != config2.*field)
          comb_level |= level;
      }

      virtual void fromServer(const ros::NodeHandle &nh, palletDetectionReconfigureConfig &config) const override
      {
        nh.getParam(name, config.*field);
      }

      virtual void toServer(const ros::NodeHandle &nh, const palletDetectionReconfigureConfig &config) const override
      {
        nh.setParam(name, config.*field);
      }

      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, palletDetectionReconfigureConfig &config) const override
      {
        return dynamic_reconfigure::ConfigTools::getParameter(msg, name, config.*field);
      }

      virtual void toMessage(dynamic_reconfigure::Config &msg, const palletDetectionReconfigureConfig &config) const override
      {
        dynamic_reconfigure::ConfigTools::appendParameter(msg, name, config.*field);
      }

      virtual void getValue(const palletDetectionReconfigureConfig &config, boost::any &val) const override
      {
        val = config.*field;
      }
    };

    class AbstractGroupDescription : public dynamic_reconfigure::Group
    {
      public:
      AbstractGroupDescription(std::string n, std::string t, int p, int i, bool s)
      {
        name = n;
        type = t;
        parent = p;
        state = s;
        id = i;
      }

      virtual ~AbstractGroupDescription() = default;

      std::vector<AbstractParamDescriptionConstPtr> abstract_parameters;
      bool state;

      virtual void toMessage(dynamic_reconfigure::Config &msg, const boost::any &config) const = 0;
      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, boost::any &config) const =0;
      virtual void updateParams(boost::any &cfg, palletDetectionReconfigureConfig &top) const= 0;
      virtual void setInitialState(boost::any &cfg) const = 0;


      void convertParams()
      {
        for(std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = abstract_parameters.begin(); i != abstract_parameters.end(); ++i)
        {
          parameters.push_back(dynamic_reconfigure::ParamDescription(**i));
        }
      }
    };

    typedef boost::shared_ptr<AbstractGroupDescription> AbstractGroupDescriptionPtr;
    typedef boost::shared_ptr<const AbstractGroupDescription> AbstractGroupDescriptionConstPtr;

    // Final keyword added to class because it has virtual methods and inherits
    // from a class with a non-virtual destructor.
    template<class T, class PT>
    class GroupDescription DYNAMIC_RECONFIGURE_FINAL : public AbstractGroupDescription
    {
    public:
      GroupDescription(std::string a_name, std::string a_type, int a_parent, int a_id, bool a_s, T PT::* a_f) : AbstractGroupDescription(a_name, a_type, a_parent, a_id, a_s), field(a_f)
      {
      }

      GroupDescription(const GroupDescription<T, PT>& g): AbstractGroupDescription(g.name, g.type, g.parent, g.id, g.state), field(g.field), groups(g.groups)
      {
        parameters = g.parameters;
        abstract_parameters = g.abstract_parameters;
      }

      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, boost::any &cfg) const override
      {
        PT* config = boost::any_cast<PT*>(cfg);
        if(!dynamic_reconfigure::ConfigTools::getGroupState(msg, name, (*config).*field))
          return false;

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          boost::any n = &((*config).*field);
          if(!(*i)->fromMessage(msg, n))
            return false;
        }

        return true;
      }

      virtual void setInitialState(boost::any &cfg) const override
      {
        PT* config = boost::any_cast<PT*>(cfg);
        T* group = &((*config).*field);
        group->state = state;

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          boost::any n = boost::any(&((*config).*field));
          (*i)->setInitialState(n);
        }

      }

      virtual void updateParams(boost::any &cfg, palletDetectionReconfigureConfig &top) const override
      {
        PT* config = boost::any_cast<PT*>(cfg);

        T* f = &((*config).*field);
        f->setParams(top, abstract_parameters);

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          boost::any n = &((*config).*field);
          (*i)->updateParams(n, top);
        }
      }

      virtual void toMessage(dynamic_reconfigure::Config &msg, const boost::any &cfg) const override
      {
        const PT config = boost::any_cast<PT>(cfg);
        dynamic_reconfigure::ConfigTools::appendGroup<T>(msg, name, id, parent, config.*field);

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          (*i)->toMessage(msg, config.*field);
        }
      }

      T PT::* field;
      std::vector<palletDetectionReconfigureConfig::AbstractGroupDescriptionConstPtr> groups;
    };

class DEFAULT
{
  public:
    DEFAULT()
    {
      state = true;
      name = "Default";
    }

    void setParams(palletDetectionReconfigureConfig &config, const std::vector<AbstractParamDescriptionConstPtr> params)
    {
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator _i = params.begin(); _i != params.end(); ++_i)
      {
        boost::any val;
        (*_i)->getValue(config, val);


      }
    }

    

    bool state;
    std::string name;

    class CUTOFF_PARAM
{
  public:
    CUTOFF_PARAM()
    {
      state = true;
      name = "Cutoff_Param";
    }

    void setParams(palletDetectionReconfigureConfig &config, const std::vector<AbstractParamDescriptionConstPtr> params)
    {
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator _i = params.begin(); _i != params.end(); ++_i)
      {
        boost::any val;
        (*_i)->getValue(config, val);

        if("min_x_cutoff"==(*_i)->name){min_x_cutoff = boost::any_cast<double>(val);}
        if("max_x_cutoff"==(*_i)->name){max_x_cutoff = boost::any_cast<double>(val);}
        if("min_y_cutoff"==(*_i)->name){min_y_cutoff = boost::any_cast<double>(val);}
        if("max_y_cutoff"==(*_i)->name){max_y_cutoff = boost::any_cast<double>(val);}
        if("min_z_cutoff"==(*_i)->name){min_z_cutoff = boost::any_cast<double>(val);}
        if("max_z_cutoff"==(*_i)->name){max_z_cutoff = boost::any_cast<double>(val);}
        if("downsample_scale"==(*_i)->name){downsample_scale = boost::any_cast<int>(val);}
      }
    }

    double min_x_cutoff;
double max_x_cutoff;
double min_y_cutoff;
double max_y_cutoff;
double min_z_cutoff;
double max_z_cutoff;
int downsample_scale;

    bool state;
    std::string name;

    
}cutoff_param;

class FLOOR_REMOVE
{
  public:
    FLOOR_REMOVE()
    {
      state = true;
      name = "Floor_Remove";
    }

    void setParams(palletDetectionReconfigureConfig &config, const std::vector<AbstractParamDescriptionConstPtr> params)
    {
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator _i = params.begin(); _i != params.end(); ++_i)
      {
        boost::any val;
        (*_i)->getValue(config, val);

        if("active_remove_floor"==(*_i)->name){active_remove_floor = boost::any_cast<bool>(val);}
        if("floor_distance_thresh"==(*_i)->name){floor_distance_thresh = boost::any_cast<double>(val);}
      }
    }

    bool active_remove_floor;
double floor_distance_thresh;

    bool state;
    std::string name;

    
}floor_remove;

class PLANE_SEGMENT
{
  public:
    PLANE_SEGMENT()
    {
      state = true;
      name = "Plane_Segment";
    }

    void setParams(palletDetectionReconfigureConfig &config, const std::vector<AbstractParamDescriptionConstPtr> params)
    {
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator _i = params.begin(); _i != params.end(); ++_i)
      {
        boost::any val;
        (*_i)->getValue(config, val);

        if("active_segment"==(*_i)->name){active_segment = boost::any_cast<bool>(val);}
        if("opencv_show"==(*_i)->name){opencv_show = boost::any_cast<bool>(val);}
        if("min_cluster_size"==(*_i)->name){min_cluster_size = boost::any_cast<int>(val);}
        if("max_cluster_size"==(*_i)->name){max_cluster_size = boost::any_cast<int>(val);}
        if("neighbor_number"==(*_i)->name){neighbor_number = boost::any_cast<int>(val);}
        if("smooth_thresh"==(*_i)->name){smooth_thresh = boost::any_cast<double>(val);}
        if("curvature_thres"==(*_i)->name){curvature_thres = boost::any_cast<double>(val);}
        if("k_search"==(*_i)->name){k_search = boost::any_cast<int>(val);}
      }
    }

    bool active_segment;
bool opencv_show;
int min_cluster_size;
int max_cluster_size;
int neighbor_number;
double smooth_thresh;
double curvature_thres;
int k_search;

    bool state;
    std::string name;

    
}plane_segment;

class TEMPLATE_MATCHING
{
  public:
    TEMPLATE_MATCHING()
    {
      state = true;
      name = "Template_matching";
    }

    void setParams(palletDetectionReconfigureConfig &config, const std::vector<AbstractParamDescriptionConstPtr> params)
    {
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator _i = params.begin(); _i != params.end(); ++_i)
      {
        boost::any val;
        (*_i)->getValue(config, val);

        if("template_matching_show"==(*_i)->name){template_matching_show = boost::any_cast<bool>(val);}
        if("match_method"==(*_i)->name){match_method = boost::any_cast<int>(val);}
        if("manual_scale"==(*_i)->name){manual_scale = boost::any_cast<bool>(val);}
        if("scale_par"==(*_i)->name){scale_par = boost::any_cast<double>(val);}
        if("min_scale"==(*_i)->name){min_scale = boost::any_cast<double>(val);}
        if("max_scale"==(*_i)->name){max_scale = boost::any_cast<double>(val);}
        if("thres"==(*_i)->name){thres = boost::any_cast<double>(val);}
        if("change_thres"==(*_i)->name){change_thres = boost::any_cast<double>(val);}
        if("scale_change_rate"==(*_i)->name){scale_change_rate = boost::any_cast<double>(val);}
      }
    }

    bool template_matching_show;
int match_method;
bool manual_scale;
double scale_par;
double min_scale;
double max_scale;
double thres;
double change_thres;
double scale_change_rate;

    bool state;
    std::string name;

    
}template_matching;

}groups;



//#line 9 "/home/cuongnguen/Techtile/auto_forklift/src/multi_pallet_detection/cfg/pallet_detection_reconfig.cfg"
      double min_x_cutoff;
//#line 10 "/home/cuongnguen/Techtile/auto_forklift/src/multi_pallet_detection/cfg/pallet_detection_reconfig.cfg"
      double max_x_cutoff;
//#line 11 "/home/cuongnguen/Techtile/auto_forklift/src/multi_pallet_detection/cfg/pallet_detection_reconfig.cfg"
      double min_y_cutoff;
//#line 12 "/home/cuongnguen/Techtile/auto_forklift/src/multi_pallet_detection/cfg/pallet_detection_reconfig.cfg"
      double max_y_cutoff;
//#line 13 "/home/cuongnguen/Techtile/auto_forklift/src/multi_pallet_detection/cfg/pallet_detection_reconfig.cfg"
      double min_z_cutoff;
//#line 14 "/home/cuongnguen/Techtile/auto_forklift/src/multi_pallet_detection/cfg/pallet_detection_reconfig.cfg"
      double max_z_cutoff;
//#line 15 "/home/cuongnguen/Techtile/auto_forklift/src/multi_pallet_detection/cfg/pallet_detection_reconfig.cfg"
      int downsample_scale;
//#line 19 "/home/cuongnguen/Techtile/auto_forklift/src/multi_pallet_detection/cfg/pallet_detection_reconfig.cfg"
      bool active_remove_floor;
//#line 20 "/home/cuongnguen/Techtile/auto_forklift/src/multi_pallet_detection/cfg/pallet_detection_reconfig.cfg"
      double floor_distance_thresh;
//#line 24 "/home/cuongnguen/Techtile/auto_forklift/src/multi_pallet_detection/cfg/pallet_detection_reconfig.cfg"
      bool active_segment;
//#line 25 "/home/cuongnguen/Techtile/auto_forklift/src/multi_pallet_detection/cfg/pallet_detection_reconfig.cfg"
      bool opencv_show;
//#line 26 "/home/cuongnguen/Techtile/auto_forklift/src/multi_pallet_detection/cfg/pallet_detection_reconfig.cfg"
      int min_cluster_size;
//#line 27 "/home/cuongnguen/Techtile/auto_forklift/src/multi_pallet_detection/cfg/pallet_detection_reconfig.cfg"
      int max_cluster_size;
//#line 28 "/home/cuongnguen/Techtile/auto_forklift/src/multi_pallet_detection/cfg/pallet_detection_reconfig.cfg"
      int neighbor_number;
//#line 29 "/home/cuongnguen/Techtile/auto_forklift/src/multi_pallet_detection/cfg/pallet_detection_reconfig.cfg"
      double smooth_thresh;
//#line 30 "/home/cuongnguen/Techtile/auto_forklift/src/multi_pallet_detection/cfg/pallet_detection_reconfig.cfg"
      double curvature_thres;
//#line 31 "/home/cuongnguen/Techtile/auto_forklift/src/multi_pallet_detection/cfg/pallet_detection_reconfig.cfg"
      int k_search;
//#line 35 "/home/cuongnguen/Techtile/auto_forklift/src/multi_pallet_detection/cfg/pallet_detection_reconfig.cfg"
      bool template_matching_show;
//#line 36 "/home/cuongnguen/Techtile/auto_forklift/src/multi_pallet_detection/cfg/pallet_detection_reconfig.cfg"
      int match_method;
//#line 37 "/home/cuongnguen/Techtile/auto_forklift/src/multi_pallet_detection/cfg/pallet_detection_reconfig.cfg"
      bool manual_scale;
//#line 38 "/home/cuongnguen/Techtile/auto_forklift/src/multi_pallet_detection/cfg/pallet_detection_reconfig.cfg"
      double scale_par;
//#line 39 "/home/cuongnguen/Techtile/auto_forklift/src/multi_pallet_detection/cfg/pallet_detection_reconfig.cfg"
      double min_scale;
//#line 40 "/home/cuongnguen/Techtile/auto_forklift/src/multi_pallet_detection/cfg/pallet_detection_reconfig.cfg"
      double max_scale;
//#line 41 "/home/cuongnguen/Techtile/auto_forklift/src/multi_pallet_detection/cfg/pallet_detection_reconfig.cfg"
      double thres;
//#line 42 "/home/cuongnguen/Techtile/auto_forklift/src/multi_pallet_detection/cfg/pallet_detection_reconfig.cfg"
      double change_thres;
//#line 43 "/home/cuongnguen/Techtile/auto_forklift/src/multi_pallet_detection/cfg/pallet_detection_reconfig.cfg"
      double scale_change_rate;
//#line 231 "/opt/ros/noetic/share/dynamic_reconfigure/cmake/../templates/ConfigType.h.template"

    bool __fromMessage__(dynamic_reconfigure::Config &msg)
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__ = __getGroupDescriptions__();

      int count = 0;
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        if ((*i)->fromMessage(msg, *this))
          count++;

      for (std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); i ++)
      {
        if ((*i)->id == 0)
        {
          boost::any n = boost::any(this);
          (*i)->updateParams(n, *this);
          (*i)->fromMessage(msg, n);
        }
      }

      if (count != dynamic_reconfigure::ConfigTools::size(msg))
      {
        ROS_ERROR("palletDetectionReconfigureConfig::__fromMessage__ called with an unexpected parameter.");
        ROS_ERROR("Booleans:");
        for (unsigned int i = 0; i < msg.bools.size(); i++)
          ROS_ERROR("  %s", msg.bools[i].name.c_str());
        ROS_ERROR("Integers:");
        for (unsigned int i = 0; i < msg.ints.size(); i++)
          ROS_ERROR("  %s", msg.ints[i].name.c_str());
        ROS_ERROR("Doubles:");
        for (unsigned int i = 0; i < msg.doubles.size(); i++)
          ROS_ERROR("  %s", msg.doubles[i].name.c_str());
        ROS_ERROR("Strings:");
        for (unsigned int i = 0; i < msg.strs.size(); i++)
          ROS_ERROR("  %s", msg.strs[i].name.c_str());
        // @todo Check that there are no duplicates. Make this error more
        // explicit.
        return false;
      }
      return true;
    }

    // This version of __toMessage__ is used during initialization of
    // statics when __getParamDescriptions__ can't be called yet.
    void __toMessage__(dynamic_reconfigure::Config &msg, const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__, const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__) const
    {
      dynamic_reconfigure::ConfigTools::clear(msg);
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->toMessage(msg, *this);

      for (std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); ++i)
      {
        if((*i)->id == 0)
        {
          (*i)->toMessage(msg, *this);
        }
      }
    }

    void __toMessage__(dynamic_reconfigure::Config &msg) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__ = __getGroupDescriptions__();
      __toMessage__(msg, __param_descriptions__, __group_descriptions__);
    }

    void __toServer__(const ros::NodeHandle &nh) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->toServer(nh, *this);
    }

    void __fromServer__(const ros::NodeHandle &nh)
    {
      static bool setup=false;

      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->fromServer(nh, *this);

      const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__ = __getGroupDescriptions__();
      for (std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); i++){
        if (!setup && (*i)->id == 0) {
          setup = true;
          boost::any n = boost::any(this);
          (*i)->setInitialState(n);
        }
      }
    }

    void __clamp__()
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      const palletDetectionReconfigureConfig &__max__ = __getMax__();
      const palletDetectionReconfigureConfig &__min__ = __getMin__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->clamp(*this, __max__, __min__);
    }

    uint32_t __level__(const palletDetectionReconfigureConfig &config) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      uint32_t level = 0;
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->calcLevel(level, config, *this);
      return level;
    }

    static const dynamic_reconfigure::ConfigDescription &__getDescriptionMessage__();
    static const palletDetectionReconfigureConfig &__getDefault__();
    static const palletDetectionReconfigureConfig &__getMax__();
    static const palletDetectionReconfigureConfig &__getMin__();
    static const std::vector<AbstractParamDescriptionConstPtr> &__getParamDescriptions__();
    static const std::vector<AbstractGroupDescriptionConstPtr> &__getGroupDescriptions__();

  private:
    static const palletDetectionReconfigureConfigStatics *__get_statics__();
  };

  template <> // Max and min are ignored for strings.
  inline void palletDetectionReconfigureConfig::ParamDescription<std::string>::clamp(palletDetectionReconfigureConfig &config, const palletDetectionReconfigureConfig &max, const palletDetectionReconfigureConfig &min) const
  {
    (void) config;
    (void) min;
    (void) max;
    return;
  }

  class palletDetectionReconfigureConfigStatics
  {
    friend class palletDetectionReconfigureConfig;

    palletDetectionReconfigureConfigStatics()
    {
palletDetectionReconfigureConfig::GroupDescription<palletDetectionReconfigureConfig::DEFAULT, palletDetectionReconfigureConfig> Default("Default", "", 0, 0, true, &palletDetectionReconfigureConfig::groups);
palletDetectionReconfigureConfig::GroupDescription<palletDetectionReconfigureConfig::DEFAULT::CUTOFF_PARAM, palletDetectionReconfigureConfig::DEFAULT> Cutoff_Param("Cutoff_Param", "tab", 0, 1, true, &palletDetectionReconfigureConfig::DEFAULT::cutoff_param);
//#line 9 "/home/cuongnguen/Techtile/auto_forklift/src/multi_pallet_detection/cfg/pallet_detection_reconfig.cfg"
      __min__.min_x_cutoff = -2.0;
//#line 9 "/home/cuongnguen/Techtile/auto_forklift/src/multi_pallet_detection/cfg/pallet_detection_reconfig.cfg"
      __max__.min_x_cutoff = 0.0;
//#line 9 "/home/cuongnguen/Techtile/auto_forklift/src/multi_pallet_detection/cfg/pallet_detection_reconfig.cfg"
      __default__.min_x_cutoff = -1.2;
//#line 9 "/home/cuongnguen/Techtile/auto_forklift/src/multi_pallet_detection/cfg/pallet_detection_reconfig.cfg"
      Cutoff_Param.abstract_parameters.push_back(palletDetectionReconfigureConfig::AbstractParamDescriptionConstPtr(new palletDetectionReconfigureConfig::ParamDescription<double>("min_x_cutoff", "double", 0, "min x distance (m)", "", &palletDetectionReconfigureConfig::min_x_cutoff)));
//#line 9 "/home/cuongnguen/Techtile/auto_forklift/src/multi_pallet_detection/cfg/pallet_detection_reconfig.cfg"
      __param_descriptions__.push_back(palletDetectionReconfigureConfig::AbstractParamDescriptionConstPtr(new palletDetectionReconfigureConfig::ParamDescription<double>("min_x_cutoff", "double", 0, "min x distance (m)", "", &palletDetectionReconfigureConfig::min_x_cutoff)));
//#line 10 "/home/cuongnguen/Techtile/auto_forklift/src/multi_pallet_detection/cfg/pallet_detection_reconfig.cfg"
      __min__.max_x_cutoff = 0.0;
//#line 10 "/home/cuongnguen/Techtile/auto_forklift/src/multi_pallet_detection/cfg/pallet_detection_reconfig.cfg"
      __max__.max_x_cutoff = 2.0;
//#line 10 "/home/cuongnguen/Techtile/auto_forklift/src/multi_pallet_detection/cfg/pallet_detection_reconfig.cfg"
      __default__.max_x_cutoff = 1.2;
//#line 10 "/home/cuongnguen/Techtile/auto_forklift/src/multi_pallet_detection/cfg/pallet_detection_reconfig.cfg"
      Cutoff_Param.abstract_parameters.push_back(palletDetectionReconfigureConfig::AbstractParamDescriptionConstPtr(new palletDetectionReconfigureConfig::ParamDescription<double>("max_x_cutoff", "double", 0, "max x distance (m)", "", &palletDetectionReconfigureConfig::max_x_cutoff)));
//#line 10 "/home/cuongnguen/Techtile/auto_forklift/src/multi_pallet_detection/cfg/pallet_detection_reconfig.cfg"
      __param_descriptions__.push_back(palletDetectionReconfigureConfig::AbstractParamDescriptionConstPtr(new palletDetectionReconfigureConfig::ParamDescription<double>("max_x_cutoff", "double", 0, "max x distance (m)", "", &palletDetectionReconfigureConfig::max_x_cutoff)));
//#line 11 "/home/cuongnguen/Techtile/auto_forklift/src/multi_pallet_detection/cfg/pallet_detection_reconfig.cfg"
      __min__.min_y_cutoff = -0.8;
//#line 11 "/home/cuongnguen/Techtile/auto_forklift/src/multi_pallet_detection/cfg/pallet_detection_reconfig.cfg"
      __max__.min_y_cutoff = 0.4;
//#line 11 "/home/cuongnguen/Techtile/auto_forklift/src/multi_pallet_detection/cfg/pallet_detection_reconfig.cfg"
      __default__.min_y_cutoff = 0.0;
//#line 11 "/home/cuongnguen/Techtile/auto_forklift/src/multi_pallet_detection/cfg/pallet_detection_reconfig.cfg"
      Cutoff_Param.abstract_parameters.push_back(palletDetectionReconfigureConfig::AbstractParamDescriptionConstPtr(new palletDetectionReconfigureConfig::ParamDescription<double>("min_y_cutoff", "double", 0, "min y distance (m)", "", &palletDetectionReconfigureConfig::min_y_cutoff)));
//#line 11 "/home/cuongnguen/Techtile/auto_forklift/src/multi_pallet_detection/cfg/pallet_detection_reconfig.cfg"
      __param_descriptions__.push_back(palletDetectionReconfigureConfig::AbstractParamDescriptionConstPtr(new palletDetectionReconfigureConfig::ParamDescription<double>("min_y_cutoff", "double", 0, "min y distance (m)", "", &palletDetectionReconfigureConfig::min_y_cutoff)));
//#line 12 "/home/cuongnguen/Techtile/auto_forklift/src/multi_pallet_detection/cfg/pallet_detection_reconfig.cfg"
      __min__.max_y_cutoff = 0.2;
//#line 12 "/home/cuongnguen/Techtile/auto_forklift/src/multi_pallet_detection/cfg/pallet_detection_reconfig.cfg"
      __max__.max_y_cutoff = 2.0;
//#line 12 "/home/cuongnguen/Techtile/auto_forklift/src/multi_pallet_detection/cfg/pallet_detection_reconfig.cfg"
      __default__.max_y_cutoff = 2.0;
//#line 12 "/home/cuongnguen/Techtile/auto_forklift/src/multi_pallet_detection/cfg/pallet_detection_reconfig.cfg"
      Cutoff_Param.abstract_parameters.push_back(palletDetectionReconfigureConfig::AbstractParamDescriptionConstPtr(new palletDetectionReconfigureConfig::ParamDescription<double>("max_y_cutoff", "double", 0, "max y distance (m)", "", &palletDetectionReconfigureConfig::max_y_cutoff)));
//#line 12 "/home/cuongnguen/Techtile/auto_forklift/src/multi_pallet_detection/cfg/pallet_detection_reconfig.cfg"
      __param_descriptions__.push_back(palletDetectionReconfigureConfig::AbstractParamDescriptionConstPtr(new palletDetectionReconfigureConfig::ParamDescription<double>("max_y_cutoff", "double", 0, "max y distance (m)", "", &palletDetectionReconfigureConfig::max_y_cutoff)));
//#line 13 "/home/cuongnguen/Techtile/auto_forklift/src/multi_pallet_detection/cfg/pallet_detection_reconfig.cfg"
      __min__.min_z_cutoff = 0.0;
//#line 13 "/home/cuongnguen/Techtile/auto_forklift/src/multi_pallet_detection/cfg/pallet_detection_reconfig.cfg"
      __max__.min_z_cutoff = 1.2;
//#line 13 "/home/cuongnguen/Techtile/auto_forklift/src/multi_pallet_detection/cfg/pallet_detection_reconfig.cfg"
      __default__.min_z_cutoff = 0.2;
//#line 13 "/home/cuongnguen/Techtile/auto_forklift/src/multi_pallet_detection/cfg/pallet_detection_reconfig.cfg"
      Cutoff_Param.abstract_parameters.push_back(palletDetectionReconfigureConfig::AbstractParamDescriptionConstPtr(new palletDetectionReconfigureConfig::ParamDescription<double>("min_z_cutoff", "double", 0, "min z distance (m)", "", &palletDetectionReconfigureConfig::min_z_cutoff)));
//#line 13 "/home/cuongnguen/Techtile/auto_forklift/src/multi_pallet_detection/cfg/pallet_detection_reconfig.cfg"
      __param_descriptions__.push_back(palletDetectionReconfigureConfig::AbstractParamDescriptionConstPtr(new palletDetectionReconfigureConfig::ParamDescription<double>("min_z_cutoff", "double", 0, "min z distance (m)", "", &palletDetectionReconfigureConfig::min_z_cutoff)));
//#line 14 "/home/cuongnguen/Techtile/auto_forklift/src/multi_pallet_detection/cfg/pallet_detection_reconfig.cfg"
      __min__.max_z_cutoff = 1.2;
//#line 14 "/home/cuongnguen/Techtile/auto_forklift/src/multi_pallet_detection/cfg/pallet_detection_reconfig.cfg"
      __max__.max_z_cutoff = 3.5;
//#line 14 "/home/cuongnguen/Techtile/auto_forklift/src/multi_pallet_detection/cfg/pallet_detection_reconfig.cfg"
      __default__.max_z_cutoff = 1.7;
//#line 14 "/home/cuongnguen/Techtile/auto_forklift/src/multi_pallet_detection/cfg/pallet_detection_reconfig.cfg"
      Cutoff_Param.abstract_parameters.push_back(palletDetectionReconfigureConfig::AbstractParamDescriptionConstPtr(new palletDetectionReconfigureConfig::ParamDescription<double>("max_z_cutoff", "double", 0, "max z distance (m)", "", &palletDetectionReconfigureConfig::max_z_cutoff)));
//#line 14 "/home/cuongnguen/Techtile/auto_forklift/src/multi_pallet_detection/cfg/pallet_detection_reconfig.cfg"
      __param_descriptions__.push_back(palletDetectionReconfigureConfig::AbstractParamDescriptionConstPtr(new palletDetectionReconfigureConfig::ParamDescription<double>("max_z_cutoff", "double", 0, "max z distance (m)", "", &palletDetectionReconfigureConfig::max_z_cutoff)));
//#line 15 "/home/cuongnguen/Techtile/auto_forklift/src/multi_pallet_detection/cfg/pallet_detection_reconfig.cfg"
      __min__.downsample_scale = 1;
//#line 15 "/home/cuongnguen/Techtile/auto_forklift/src/multi_pallet_detection/cfg/pallet_detection_reconfig.cfg"
      __max__.downsample_scale = 5;
//#line 15 "/home/cuongnguen/Techtile/auto_forklift/src/multi_pallet_detection/cfg/pallet_detection_reconfig.cfg"
      __default__.downsample_scale = 2;
//#line 15 "/home/cuongnguen/Techtile/auto_forklift/src/multi_pallet_detection/cfg/pallet_detection_reconfig.cfg"
      Cutoff_Param.abstract_parameters.push_back(palletDetectionReconfigureConfig::AbstractParamDescriptionConstPtr(new palletDetectionReconfigureConfig::ParamDescription<int>("downsample_scale", "int", 0, "downsample scale", "", &palletDetectionReconfigureConfig::downsample_scale)));
//#line 15 "/home/cuongnguen/Techtile/auto_forklift/src/multi_pallet_detection/cfg/pallet_detection_reconfig.cfg"
      __param_descriptions__.push_back(palletDetectionReconfigureConfig::AbstractParamDescriptionConstPtr(new palletDetectionReconfigureConfig::ParamDescription<int>("downsample_scale", "int", 0, "downsample scale", "", &palletDetectionReconfigureConfig::downsample_scale)));
//#line 124 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Cutoff_Param.convertParams();
//#line 124 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.groups.push_back(palletDetectionReconfigureConfig::AbstractGroupDescriptionConstPtr(new palletDetectionReconfigureConfig::GroupDescription<palletDetectionReconfigureConfig::DEFAULT::CUTOFF_PARAM, palletDetectionReconfigureConfig::DEFAULT>(Cutoff_Param)));
//#line 124 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __group_descriptions__.push_back(palletDetectionReconfigureConfig::AbstractGroupDescriptionConstPtr(new palletDetectionReconfigureConfig::GroupDescription<palletDetectionReconfigureConfig::DEFAULT::CUTOFF_PARAM, palletDetectionReconfigureConfig::DEFAULT>(Cutoff_Param)));
palletDetectionReconfigureConfig::GroupDescription<palletDetectionReconfigureConfig::DEFAULT::FLOOR_REMOVE, palletDetectionReconfigureConfig::DEFAULT> Floor_Remove("Floor_Remove", "tab", 0, 2, true, &palletDetectionReconfigureConfig::DEFAULT::floor_remove);
//#line 19 "/home/cuongnguen/Techtile/auto_forklift/src/multi_pallet_detection/cfg/pallet_detection_reconfig.cfg"
      __min__.active_remove_floor = 0;
//#line 19 "/home/cuongnguen/Techtile/auto_forklift/src/multi_pallet_detection/cfg/pallet_detection_reconfig.cfg"
      __max__.active_remove_floor = 1;
//#line 19 "/home/cuongnguen/Techtile/auto_forklift/src/multi_pallet_detection/cfg/pallet_detection_reconfig.cfg"
      __default__.active_remove_floor = 1;
//#line 19 "/home/cuongnguen/Techtile/auto_forklift/src/multi_pallet_detection/cfg/pallet_detection_reconfig.cfg"
      Floor_Remove.abstract_parameters.push_back(palletDetectionReconfigureConfig::AbstractParamDescriptionConstPtr(new palletDetectionReconfigureConfig::ParamDescription<bool>("active_remove_floor", "bool", 0, "remove floor or not", "", &palletDetectionReconfigureConfig::active_remove_floor)));
//#line 19 "/home/cuongnguen/Techtile/auto_forklift/src/multi_pallet_detection/cfg/pallet_detection_reconfig.cfg"
      __param_descriptions__.push_back(palletDetectionReconfigureConfig::AbstractParamDescriptionConstPtr(new palletDetectionReconfigureConfig::ParamDescription<bool>("active_remove_floor", "bool", 0, "remove floor or not", "", &palletDetectionReconfigureConfig::active_remove_floor)));
//#line 20 "/home/cuongnguen/Techtile/auto_forklift/src/multi_pallet_detection/cfg/pallet_detection_reconfig.cfg"
      __min__.floor_distance_thresh = 0.0;
//#line 20 "/home/cuongnguen/Techtile/auto_forklift/src/multi_pallet_detection/cfg/pallet_detection_reconfig.cfg"
      __max__.floor_distance_thresh = 1.0;
//#line 20 "/home/cuongnguen/Techtile/auto_forklift/src/multi_pallet_detection/cfg/pallet_detection_reconfig.cfg"
      __default__.floor_distance_thresh = 0.03;
//#line 20 "/home/cuongnguen/Techtile/auto_forklift/src/multi_pallet_detection/cfg/pallet_detection_reconfig.cfg"
      Floor_Remove.abstract_parameters.push_back(palletDetectionReconfigureConfig::AbstractParamDescriptionConstPtr(new palletDetectionReconfigureConfig::ParamDescription<double>("floor_distance_thresh", "double", 0, "floor distance thresh", "", &palletDetectionReconfigureConfig::floor_distance_thresh)));
//#line 20 "/home/cuongnguen/Techtile/auto_forklift/src/multi_pallet_detection/cfg/pallet_detection_reconfig.cfg"
      __param_descriptions__.push_back(palletDetectionReconfigureConfig::AbstractParamDescriptionConstPtr(new palletDetectionReconfigureConfig::ParamDescription<double>("floor_distance_thresh", "double", 0, "floor distance thresh", "", &palletDetectionReconfigureConfig::floor_distance_thresh)));
//#line 124 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Floor_Remove.convertParams();
//#line 124 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.groups.push_back(palletDetectionReconfigureConfig::AbstractGroupDescriptionConstPtr(new palletDetectionReconfigureConfig::GroupDescription<palletDetectionReconfigureConfig::DEFAULT::FLOOR_REMOVE, palletDetectionReconfigureConfig::DEFAULT>(Floor_Remove)));
//#line 124 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __group_descriptions__.push_back(palletDetectionReconfigureConfig::AbstractGroupDescriptionConstPtr(new palletDetectionReconfigureConfig::GroupDescription<palletDetectionReconfigureConfig::DEFAULT::FLOOR_REMOVE, palletDetectionReconfigureConfig::DEFAULT>(Floor_Remove)));
palletDetectionReconfigureConfig::GroupDescription<palletDetectionReconfigureConfig::DEFAULT::PLANE_SEGMENT, palletDetectionReconfigureConfig::DEFAULT> Plane_Segment("Plane_Segment", "tab", 0, 3, true, &palletDetectionReconfigureConfig::DEFAULT::plane_segment);
//#line 24 "/home/cuongnguen/Techtile/auto_forklift/src/multi_pallet_detection/cfg/pallet_detection_reconfig.cfg"
      __min__.active_segment = 0;
//#line 24 "/home/cuongnguen/Techtile/auto_forklift/src/multi_pallet_detection/cfg/pallet_detection_reconfig.cfg"
      __max__.active_segment = 1;
//#line 24 "/home/cuongnguen/Techtile/auto_forklift/src/multi_pallet_detection/cfg/pallet_detection_reconfig.cfg"
      __default__.active_segment = 1;
//#line 24 "/home/cuongnguen/Techtile/auto_forklift/src/multi_pallet_detection/cfg/pallet_detection_reconfig.cfg"
      Plane_Segment.abstract_parameters.push_back(palletDetectionReconfigureConfig::AbstractParamDescriptionConstPtr(new palletDetectionReconfigureConfig::ParamDescription<bool>("active_segment", "bool", 0, "remove floor or not", "", &palletDetectionReconfigureConfig::active_segment)));
//#line 24 "/home/cuongnguen/Techtile/auto_forklift/src/multi_pallet_detection/cfg/pallet_detection_reconfig.cfg"
      __param_descriptions__.push_back(palletDetectionReconfigureConfig::AbstractParamDescriptionConstPtr(new palletDetectionReconfigureConfig::ParamDescription<bool>("active_segment", "bool", 0, "remove floor or not", "", &palletDetectionReconfigureConfig::active_segment)));
//#line 25 "/home/cuongnguen/Techtile/auto_forklift/src/multi_pallet_detection/cfg/pallet_detection_reconfig.cfg"
      __min__.opencv_show = 0;
//#line 25 "/home/cuongnguen/Techtile/auto_forklift/src/multi_pallet_detection/cfg/pallet_detection_reconfig.cfg"
      __max__.opencv_show = 1;
//#line 25 "/home/cuongnguen/Techtile/auto_forklift/src/multi_pallet_detection/cfg/pallet_detection_reconfig.cfg"
      __default__.opencv_show = 0;
//#line 25 "/home/cuongnguen/Techtile/auto_forklift/src/multi_pallet_detection/cfg/pallet_detection_reconfig.cfg"
      Plane_Segment.abstract_parameters.push_back(palletDetectionReconfigureConfig::AbstractParamDescriptionConstPtr(new palletDetectionReconfigureConfig::ParamDescription<bool>("opencv_show", "bool", 0, "opencv show", "", &palletDetectionReconfigureConfig::opencv_show)));
//#line 25 "/home/cuongnguen/Techtile/auto_forklift/src/multi_pallet_detection/cfg/pallet_detection_reconfig.cfg"
      __param_descriptions__.push_back(palletDetectionReconfigureConfig::AbstractParamDescriptionConstPtr(new palletDetectionReconfigureConfig::ParamDescription<bool>("opencv_show", "bool", 0, "opencv show", "", &palletDetectionReconfigureConfig::opencv_show)));
//#line 26 "/home/cuongnguen/Techtile/auto_forklift/src/multi_pallet_detection/cfg/pallet_detection_reconfig.cfg"
      __min__.min_cluster_size = 0;
//#line 26 "/home/cuongnguen/Techtile/auto_forklift/src/multi_pallet_detection/cfg/pallet_detection_reconfig.cfg"
      __max__.min_cluster_size = 10000;
//#line 26 "/home/cuongnguen/Techtile/auto_forklift/src/multi_pallet_detection/cfg/pallet_detection_reconfig.cfg"
      __default__.min_cluster_size = 5000;
//#line 26 "/home/cuongnguen/Techtile/auto_forklift/src/multi_pallet_detection/cfg/pallet_detection_reconfig.cfg"
      Plane_Segment.abstract_parameters.push_back(palletDetectionReconfigureConfig::AbstractParamDescriptionConstPtr(new palletDetectionReconfigureConfig::ParamDescription<int>("min_cluster_size", "int", 0, "min cluster size", "", &palletDetectionReconfigureConfig::min_cluster_size)));
//#line 26 "/home/cuongnguen/Techtile/auto_forklift/src/multi_pallet_detection/cfg/pallet_detection_reconfig.cfg"
      __param_descriptions__.push_back(palletDetectionReconfigureConfig::AbstractParamDescriptionConstPtr(new palletDetectionReconfigureConfig::ParamDescription<int>("min_cluster_size", "int", 0, "min cluster size", "", &palletDetectionReconfigureConfig::min_cluster_size)));
//#line 27 "/home/cuongnguen/Techtile/auto_forklift/src/multi_pallet_detection/cfg/pallet_detection_reconfig.cfg"
      __min__.max_cluster_size = 10000;
//#line 27 "/home/cuongnguen/Techtile/auto_forklift/src/multi_pallet_detection/cfg/pallet_detection_reconfig.cfg"
      __max__.max_cluster_size = 1000000;
//#line 27 "/home/cuongnguen/Techtile/auto_forklift/src/multi_pallet_detection/cfg/pallet_detection_reconfig.cfg"
      __default__.max_cluster_size = 100000;
//#line 27 "/home/cuongnguen/Techtile/auto_forklift/src/multi_pallet_detection/cfg/pallet_detection_reconfig.cfg"
      Plane_Segment.abstract_parameters.push_back(palletDetectionReconfigureConfig::AbstractParamDescriptionConstPtr(new palletDetectionReconfigureConfig::ParamDescription<int>("max_cluster_size", "int", 0, "max cluster size", "", &palletDetectionReconfigureConfig::max_cluster_size)));
//#line 27 "/home/cuongnguen/Techtile/auto_forklift/src/multi_pallet_detection/cfg/pallet_detection_reconfig.cfg"
      __param_descriptions__.push_back(palletDetectionReconfigureConfig::AbstractParamDescriptionConstPtr(new palletDetectionReconfigureConfig::ParamDescription<int>("max_cluster_size", "int", 0, "max cluster size", "", &palletDetectionReconfigureConfig::max_cluster_size)));
//#line 28 "/home/cuongnguen/Techtile/auto_forklift/src/multi_pallet_detection/cfg/pallet_detection_reconfig.cfg"
      __min__.neighbor_number = 10;
//#line 28 "/home/cuongnguen/Techtile/auto_forklift/src/multi_pallet_detection/cfg/pallet_detection_reconfig.cfg"
      __max__.neighbor_number = 200;
//#line 28 "/home/cuongnguen/Techtile/auto_forklift/src/multi_pallet_detection/cfg/pallet_detection_reconfig.cfg"
      __default__.neighbor_number = 100;
//#line 28 "/home/cuongnguen/Techtile/auto_forklift/src/multi_pallet_detection/cfg/pallet_detection_reconfig.cfg"
      Plane_Segment.abstract_parameters.push_back(palletDetectionReconfigureConfig::AbstractParamDescriptionConstPtr(new palletDetectionReconfigureConfig::ParamDescription<int>("neighbor_number", "int", 0, "neighbor number", "", &palletDetectionReconfigureConfig::neighbor_number)));
//#line 28 "/home/cuongnguen/Techtile/auto_forklift/src/multi_pallet_detection/cfg/pallet_detection_reconfig.cfg"
      __param_descriptions__.push_back(palletDetectionReconfigureConfig::AbstractParamDescriptionConstPtr(new palletDetectionReconfigureConfig::ParamDescription<int>("neighbor_number", "int", 0, "neighbor number", "", &palletDetectionReconfigureConfig::neighbor_number)));
//#line 29 "/home/cuongnguen/Techtile/auto_forklift/src/multi_pallet_detection/cfg/pallet_detection_reconfig.cfg"
      __min__.smooth_thresh = 0.0;
//#line 29 "/home/cuongnguen/Techtile/auto_forklift/src/multi_pallet_detection/cfg/pallet_detection_reconfig.cfg"
      __max__.smooth_thresh = 20.0;
//#line 29 "/home/cuongnguen/Techtile/auto_forklift/src/multi_pallet_detection/cfg/pallet_detection_reconfig.cfg"
      __default__.smooth_thresh = 10.0;
//#line 29 "/home/cuongnguen/Techtile/auto_forklift/src/multi_pallet_detection/cfg/pallet_detection_reconfig.cfg"
      Plane_Segment.abstract_parameters.push_back(palletDetectionReconfigureConfig::AbstractParamDescriptionConstPtr(new palletDetectionReconfigureConfig::ParamDescription<double>("smooth_thresh", "double", 0, "angle (deg) smooth thresh", "", &palletDetectionReconfigureConfig::smooth_thresh)));
//#line 29 "/home/cuongnguen/Techtile/auto_forklift/src/multi_pallet_detection/cfg/pallet_detection_reconfig.cfg"
      __param_descriptions__.push_back(palletDetectionReconfigureConfig::AbstractParamDescriptionConstPtr(new palletDetectionReconfigureConfig::ParamDescription<double>("smooth_thresh", "double", 0, "angle (deg) smooth thresh", "", &palletDetectionReconfigureConfig::smooth_thresh)));
//#line 30 "/home/cuongnguen/Techtile/auto_forklift/src/multi_pallet_detection/cfg/pallet_detection_reconfig.cfg"
      __min__.curvature_thres = 0.0;
//#line 30 "/home/cuongnguen/Techtile/auto_forklift/src/multi_pallet_detection/cfg/pallet_detection_reconfig.cfg"
      __max__.curvature_thres = 20.0;
//#line 30 "/home/cuongnguen/Techtile/auto_forklift/src/multi_pallet_detection/cfg/pallet_detection_reconfig.cfg"
      __default__.curvature_thres = 5.0;
//#line 30 "/home/cuongnguen/Techtile/auto_forklift/src/multi_pallet_detection/cfg/pallet_detection_reconfig.cfg"
      Plane_Segment.abstract_parameters.push_back(palletDetectionReconfigureConfig::AbstractParamDescriptionConstPtr(new palletDetectionReconfigureConfig::ParamDescription<double>("curvature_thres", "double", 0, "curvature thres", "", &palletDetectionReconfigureConfig::curvature_thres)));
//#line 30 "/home/cuongnguen/Techtile/auto_forklift/src/multi_pallet_detection/cfg/pallet_detection_reconfig.cfg"
      __param_descriptions__.push_back(palletDetectionReconfigureConfig::AbstractParamDescriptionConstPtr(new palletDetectionReconfigureConfig::ParamDescription<double>("curvature_thres", "double", 0, "curvature thres", "", &palletDetectionReconfigureConfig::curvature_thres)));
//#line 31 "/home/cuongnguen/Techtile/auto_forklift/src/multi_pallet_detection/cfg/pallet_detection_reconfig.cfg"
      __min__.k_search = 0;
//#line 31 "/home/cuongnguen/Techtile/auto_forklift/src/multi_pallet_detection/cfg/pallet_detection_reconfig.cfg"
      __max__.k_search = 500;
//#line 31 "/home/cuongnguen/Techtile/auto_forklift/src/multi_pallet_detection/cfg/pallet_detection_reconfig.cfg"
      __default__.k_search = 50;
//#line 31 "/home/cuongnguen/Techtile/auto_forklift/src/multi_pallet_detection/cfg/pallet_detection_reconfig.cfg"
      Plane_Segment.abstract_parameters.push_back(palletDetectionReconfigureConfig::AbstractParamDescriptionConstPtr(new palletDetectionReconfigureConfig::ParamDescription<int>("k_search", "int", 0, "k search", "", &palletDetectionReconfigureConfig::k_search)));
//#line 31 "/home/cuongnguen/Techtile/auto_forklift/src/multi_pallet_detection/cfg/pallet_detection_reconfig.cfg"
      __param_descriptions__.push_back(palletDetectionReconfigureConfig::AbstractParamDescriptionConstPtr(new palletDetectionReconfigureConfig::ParamDescription<int>("k_search", "int", 0, "k search", "", &palletDetectionReconfigureConfig::k_search)));
//#line 124 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Plane_Segment.convertParams();
//#line 124 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.groups.push_back(palletDetectionReconfigureConfig::AbstractGroupDescriptionConstPtr(new palletDetectionReconfigureConfig::GroupDescription<palletDetectionReconfigureConfig::DEFAULT::PLANE_SEGMENT, palletDetectionReconfigureConfig::DEFAULT>(Plane_Segment)));
//#line 124 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __group_descriptions__.push_back(palletDetectionReconfigureConfig::AbstractGroupDescriptionConstPtr(new palletDetectionReconfigureConfig::GroupDescription<palletDetectionReconfigureConfig::DEFAULT::PLANE_SEGMENT, palletDetectionReconfigureConfig::DEFAULT>(Plane_Segment)));
palletDetectionReconfigureConfig::GroupDescription<palletDetectionReconfigureConfig::DEFAULT::TEMPLATE_MATCHING, palletDetectionReconfigureConfig::DEFAULT> Template_matching("Template_matching", "tab", 0, 4, true, &palletDetectionReconfigureConfig::DEFAULT::template_matching);
//#line 35 "/home/cuongnguen/Techtile/auto_forklift/src/multi_pallet_detection/cfg/pallet_detection_reconfig.cfg"
      __min__.template_matching_show = 0;
//#line 35 "/home/cuongnguen/Techtile/auto_forklift/src/multi_pallet_detection/cfg/pallet_detection_reconfig.cfg"
      __max__.template_matching_show = 1;
//#line 35 "/home/cuongnguen/Techtile/auto_forklift/src/multi_pallet_detection/cfg/pallet_detection_reconfig.cfg"
      __default__.template_matching_show = 0;
//#line 35 "/home/cuongnguen/Techtile/auto_forklift/src/multi_pallet_detection/cfg/pallet_detection_reconfig.cfg"
      Template_matching.abstract_parameters.push_back(palletDetectionReconfigureConfig::AbstractParamDescriptionConstPtr(new palletDetectionReconfigureConfig::ParamDescription<bool>("template_matching_show", "bool", 0, "show opencv template matching window", "", &palletDetectionReconfigureConfig::template_matching_show)));
//#line 35 "/home/cuongnguen/Techtile/auto_forklift/src/multi_pallet_detection/cfg/pallet_detection_reconfig.cfg"
      __param_descriptions__.push_back(palletDetectionReconfigureConfig::AbstractParamDescriptionConstPtr(new palletDetectionReconfigureConfig::ParamDescription<bool>("template_matching_show", "bool", 0, "show opencv template matching window", "", &palletDetectionReconfigureConfig::template_matching_show)));
//#line 36 "/home/cuongnguen/Techtile/auto_forklift/src/multi_pallet_detection/cfg/pallet_detection_reconfig.cfg"
      __min__.match_method = 0;
//#line 36 "/home/cuongnguen/Techtile/auto_forklift/src/multi_pallet_detection/cfg/pallet_detection_reconfig.cfg"
      __max__.match_method = 4;
//#line 36 "/home/cuongnguen/Techtile/auto_forklift/src/multi_pallet_detection/cfg/pallet_detection_reconfig.cfg"
      __default__.match_method = 0;
//#line 36 "/home/cuongnguen/Techtile/auto_forklift/src/multi_pallet_detection/cfg/pallet_detection_reconfig.cfg"
      Template_matching.abstract_parameters.push_back(palletDetectionReconfigureConfig::AbstractParamDescriptionConstPtr(new palletDetectionReconfigureConfig::ParamDescription<int>("match_method", "int", 0, "match method", "", &palletDetectionReconfigureConfig::match_method)));
//#line 36 "/home/cuongnguen/Techtile/auto_forklift/src/multi_pallet_detection/cfg/pallet_detection_reconfig.cfg"
      __param_descriptions__.push_back(palletDetectionReconfigureConfig::AbstractParamDescriptionConstPtr(new palletDetectionReconfigureConfig::ParamDescription<int>("match_method", "int", 0, "match method", "", &palletDetectionReconfigureConfig::match_method)));
//#line 37 "/home/cuongnguen/Techtile/auto_forklift/src/multi_pallet_detection/cfg/pallet_detection_reconfig.cfg"
      __min__.manual_scale = 0;
//#line 37 "/home/cuongnguen/Techtile/auto_forklift/src/multi_pallet_detection/cfg/pallet_detection_reconfig.cfg"
      __max__.manual_scale = 1;
//#line 37 "/home/cuongnguen/Techtile/auto_forklift/src/multi_pallet_detection/cfg/pallet_detection_reconfig.cfg"
      __default__.manual_scale = 0;
//#line 37 "/home/cuongnguen/Techtile/auto_forklift/src/multi_pallet_detection/cfg/pallet_detection_reconfig.cfg"
      Template_matching.abstract_parameters.push_back(palletDetectionReconfigureConfig::AbstractParamDescriptionConstPtr(new palletDetectionReconfigureConfig::ParamDescription<bool>("manual_scale", "bool", 0, "manual scale set for template", "", &palletDetectionReconfigureConfig::manual_scale)));
//#line 37 "/home/cuongnguen/Techtile/auto_forklift/src/multi_pallet_detection/cfg/pallet_detection_reconfig.cfg"
      __param_descriptions__.push_back(palletDetectionReconfigureConfig::AbstractParamDescriptionConstPtr(new palletDetectionReconfigureConfig::ParamDescription<bool>("manual_scale", "bool", 0, "manual scale set for template", "", &palletDetectionReconfigureConfig::manual_scale)));
//#line 38 "/home/cuongnguen/Techtile/auto_forklift/src/multi_pallet_detection/cfg/pallet_detection_reconfig.cfg"
      __min__.scale_par = 0.1;
//#line 38 "/home/cuongnguen/Techtile/auto_forklift/src/multi_pallet_detection/cfg/pallet_detection_reconfig.cfg"
      __max__.scale_par = 6.0;
//#line 38 "/home/cuongnguen/Techtile/auto_forklift/src/multi_pallet_detection/cfg/pallet_detection_reconfig.cfg"
      __default__.scale_par = 1.0;
//#line 38 "/home/cuongnguen/Techtile/auto_forklift/src/multi_pallet_detection/cfg/pallet_detection_reconfig.cfg"
      Template_matching.abstract_parameters.push_back(palletDetectionReconfigureConfig::AbstractParamDescriptionConstPtr(new palletDetectionReconfigureConfig::ParamDescription<double>("scale_par", "double", 0, "manual set for scale parameter of template", "", &palletDetectionReconfigureConfig::scale_par)));
//#line 38 "/home/cuongnguen/Techtile/auto_forklift/src/multi_pallet_detection/cfg/pallet_detection_reconfig.cfg"
      __param_descriptions__.push_back(palletDetectionReconfigureConfig::AbstractParamDescriptionConstPtr(new palletDetectionReconfigureConfig::ParamDescription<double>("scale_par", "double", 0, "manual set for scale parameter of template", "", &palletDetectionReconfigureConfig::scale_par)));
//#line 39 "/home/cuongnguen/Techtile/auto_forklift/src/multi_pallet_detection/cfg/pallet_detection_reconfig.cfg"
      __min__.min_scale = 0.1;
//#line 39 "/home/cuongnguen/Techtile/auto_forklift/src/multi_pallet_detection/cfg/pallet_detection_reconfig.cfg"
      __max__.min_scale = 1.0;
//#line 39 "/home/cuongnguen/Techtile/auto_forklift/src/multi_pallet_detection/cfg/pallet_detection_reconfig.cfg"
      __default__.min_scale = 0.9;
//#line 39 "/home/cuongnguen/Techtile/auto_forklift/src/multi_pallet_detection/cfg/pallet_detection_reconfig.cfg"
      Template_matching.abstract_parameters.push_back(palletDetectionReconfigureConfig::AbstractParamDescriptionConstPtr(new palletDetectionReconfigureConfig::ParamDescription<double>("min_scale", "double", 0, "min scale of auto set scale mode", "", &palletDetectionReconfigureConfig::min_scale)));
//#line 39 "/home/cuongnguen/Techtile/auto_forklift/src/multi_pallet_detection/cfg/pallet_detection_reconfig.cfg"
      __param_descriptions__.push_back(palletDetectionReconfigureConfig::AbstractParamDescriptionConstPtr(new palletDetectionReconfigureConfig::ParamDescription<double>("min_scale", "double", 0, "min scale of auto set scale mode", "", &palletDetectionReconfigureConfig::min_scale)));
//#line 40 "/home/cuongnguen/Techtile/auto_forklift/src/multi_pallet_detection/cfg/pallet_detection_reconfig.cfg"
      __min__.max_scale = 1.1;
//#line 40 "/home/cuongnguen/Techtile/auto_forklift/src/multi_pallet_detection/cfg/pallet_detection_reconfig.cfg"
      __max__.max_scale = 6.0;
//#line 40 "/home/cuongnguen/Techtile/auto_forklift/src/multi_pallet_detection/cfg/pallet_detection_reconfig.cfg"
      __default__.max_scale = 1.6;
//#line 40 "/home/cuongnguen/Techtile/auto_forklift/src/multi_pallet_detection/cfg/pallet_detection_reconfig.cfg"
      Template_matching.abstract_parameters.push_back(palletDetectionReconfigureConfig::AbstractParamDescriptionConstPtr(new palletDetectionReconfigureConfig::ParamDescription<double>("max_scale", "double", 0, "max scale of auto set scale mode", "", &palletDetectionReconfigureConfig::max_scale)));
//#line 40 "/home/cuongnguen/Techtile/auto_forklift/src/multi_pallet_detection/cfg/pallet_detection_reconfig.cfg"
      __param_descriptions__.push_back(palletDetectionReconfigureConfig::AbstractParamDescriptionConstPtr(new palletDetectionReconfigureConfig::ParamDescription<double>("max_scale", "double", 0, "max scale of auto set scale mode", "", &palletDetectionReconfigureConfig::max_scale)));
//#line 41 "/home/cuongnguen/Techtile/auto_forklift/src/multi_pallet_detection/cfg/pallet_detection_reconfig.cfg"
      __min__.thres = 0.0;
//#line 41 "/home/cuongnguen/Techtile/auto_forklift/src/multi_pallet_detection/cfg/pallet_detection_reconfig.cfg"
      __max__.thres = 10.0;
//#line 41 "/home/cuongnguen/Techtile/auto_forklift/src/multi_pallet_detection/cfg/pallet_detection_reconfig.cfg"
      __default__.thres = 1.5;
//#line 41 "/home/cuongnguen/Techtile/auto_forklift/src/multi_pallet_detection/cfg/pallet_detection_reconfig.cfg"
      Template_matching.abstract_parameters.push_back(palletDetectionReconfigureConfig::AbstractParamDescriptionConstPtr(new palletDetectionReconfigureConfig::ParamDescription<double>("thres", "double", 0, "threshold", "", &palletDetectionReconfigureConfig::thres)));
//#line 41 "/home/cuongnguen/Techtile/auto_forklift/src/multi_pallet_detection/cfg/pallet_detection_reconfig.cfg"
      __param_descriptions__.push_back(palletDetectionReconfigureConfig::AbstractParamDescriptionConstPtr(new palletDetectionReconfigureConfig::ParamDescription<double>("thres", "double", 0, "threshold", "", &palletDetectionReconfigureConfig::thres)));
//#line 42 "/home/cuongnguen/Techtile/auto_forklift/src/multi_pallet_detection/cfg/pallet_detection_reconfig.cfg"
      __min__.change_thres = 0.1;
//#line 42 "/home/cuongnguen/Techtile/auto_forklift/src/multi_pallet_detection/cfg/pallet_detection_reconfig.cfg"
      __max__.change_thres = 1.0;
//#line 42 "/home/cuongnguen/Techtile/auto_forklift/src/multi_pallet_detection/cfg/pallet_detection_reconfig.cfg"
      __default__.change_thres = 0.2;
//#line 42 "/home/cuongnguen/Techtile/auto_forklift/src/multi_pallet_detection/cfg/pallet_detection_reconfig.cfg"
      Template_matching.abstract_parameters.push_back(palletDetectionReconfigureConfig::AbstractParamDescriptionConstPtr(new palletDetectionReconfigureConfig::ParamDescription<double>("change_thres", "double", 0, "optimal scale change threshold", "", &palletDetectionReconfigureConfig::change_thres)));
//#line 42 "/home/cuongnguen/Techtile/auto_forklift/src/multi_pallet_detection/cfg/pallet_detection_reconfig.cfg"
      __param_descriptions__.push_back(palletDetectionReconfigureConfig::AbstractParamDescriptionConstPtr(new palletDetectionReconfigureConfig::ParamDescription<double>("change_thres", "double", 0, "optimal scale change threshold", "", &palletDetectionReconfigureConfig::change_thres)));
//#line 43 "/home/cuongnguen/Techtile/auto_forklift/src/multi_pallet_detection/cfg/pallet_detection_reconfig.cfg"
      __min__.scale_change_rate = 0.01;
//#line 43 "/home/cuongnguen/Techtile/auto_forklift/src/multi_pallet_detection/cfg/pallet_detection_reconfig.cfg"
      __max__.scale_change_rate = 0.5;
//#line 43 "/home/cuongnguen/Techtile/auto_forklift/src/multi_pallet_detection/cfg/pallet_detection_reconfig.cfg"
      __default__.scale_change_rate = 0.01;
//#line 43 "/home/cuongnguen/Techtile/auto_forklift/src/multi_pallet_detection/cfg/pallet_detection_reconfig.cfg"
      Template_matching.abstract_parameters.push_back(palletDetectionReconfigureConfig::AbstractParamDescriptionConstPtr(new palletDetectionReconfigureConfig::ParamDescription<double>("scale_change_rate", "double", 0, "scale change rate", "", &palletDetectionReconfigureConfig::scale_change_rate)));
//#line 43 "/home/cuongnguen/Techtile/auto_forklift/src/multi_pallet_detection/cfg/pallet_detection_reconfig.cfg"
      __param_descriptions__.push_back(palletDetectionReconfigureConfig::AbstractParamDescriptionConstPtr(new palletDetectionReconfigureConfig::ParamDescription<double>("scale_change_rate", "double", 0, "scale change rate", "", &palletDetectionReconfigureConfig::scale_change_rate)));
//#line 124 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Template_matching.convertParams();
//#line 124 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.groups.push_back(palletDetectionReconfigureConfig::AbstractGroupDescriptionConstPtr(new palletDetectionReconfigureConfig::GroupDescription<palletDetectionReconfigureConfig::DEFAULT::TEMPLATE_MATCHING, palletDetectionReconfigureConfig::DEFAULT>(Template_matching)));
//#line 124 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __group_descriptions__.push_back(palletDetectionReconfigureConfig::AbstractGroupDescriptionConstPtr(new palletDetectionReconfigureConfig::GroupDescription<palletDetectionReconfigureConfig::DEFAULT::TEMPLATE_MATCHING, palletDetectionReconfigureConfig::DEFAULT>(Template_matching)));
//#line 246 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.convertParams();
//#line 246 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __group_descriptions__.push_back(palletDetectionReconfigureConfig::AbstractGroupDescriptionConstPtr(new palletDetectionReconfigureConfig::GroupDescription<palletDetectionReconfigureConfig::DEFAULT, palletDetectionReconfigureConfig>(Default)));
//#line 369 "/opt/ros/noetic/share/dynamic_reconfigure/cmake/../templates/ConfigType.h.template"

      for (std::vector<palletDetectionReconfigureConfig::AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); ++i)
      {
        __description_message__.groups.push_back(**i);
      }
      __max__.__toMessage__(__description_message__.max, __param_descriptions__, __group_descriptions__);
      __min__.__toMessage__(__description_message__.min, __param_descriptions__, __group_descriptions__);
      __default__.__toMessage__(__description_message__.dflt, __param_descriptions__, __group_descriptions__);
    }
    std::vector<palletDetectionReconfigureConfig::AbstractParamDescriptionConstPtr> __param_descriptions__;
    std::vector<palletDetectionReconfigureConfig::AbstractGroupDescriptionConstPtr> __group_descriptions__;
    palletDetectionReconfigureConfig __max__;
    palletDetectionReconfigureConfig __min__;
    palletDetectionReconfigureConfig __default__;
    dynamic_reconfigure::ConfigDescription __description_message__;

    static const palletDetectionReconfigureConfigStatics *get_instance()
    {
      // Split this off in a separate function because I know that
      // instance will get initialized the first time get_instance is
      // called, and I am guaranteeing that get_instance gets called at
      // most once.
      static palletDetectionReconfigureConfigStatics instance;
      return &instance;
    }
  };

  inline const dynamic_reconfigure::ConfigDescription &palletDetectionReconfigureConfig::__getDescriptionMessage__()
  {
    return __get_statics__()->__description_message__;
  }

  inline const palletDetectionReconfigureConfig &palletDetectionReconfigureConfig::__getDefault__()
  {
    return __get_statics__()->__default__;
  }

  inline const palletDetectionReconfigureConfig &palletDetectionReconfigureConfig::__getMax__()
  {
    return __get_statics__()->__max__;
  }

  inline const palletDetectionReconfigureConfig &palletDetectionReconfigureConfig::__getMin__()
  {
    return __get_statics__()->__min__;
  }

  inline const std::vector<palletDetectionReconfigureConfig::AbstractParamDescriptionConstPtr> &palletDetectionReconfigureConfig::__getParamDescriptions__()
  {
    return __get_statics__()->__param_descriptions__;
  }

  inline const std::vector<palletDetectionReconfigureConfig::AbstractGroupDescriptionConstPtr> &palletDetectionReconfigureConfig::__getGroupDescriptions__()
  {
    return __get_statics__()->__group_descriptions__;
  }

  inline const palletDetectionReconfigureConfigStatics *palletDetectionReconfigureConfig::__get_statics__()
  {
    const static palletDetectionReconfigureConfigStatics *statics;

    if (statics) // Common case
      return statics;

    boost::mutex::scoped_lock lock(dynamic_reconfigure::__init_mutex__);

    if (statics) // In case we lost a race.
      return statics;

    statics = palletDetectionReconfigureConfigStatics::get_instance();

    return statics;
  }


}

#undef DYNAMIC_RECONFIGURE_FINAL

#endif // __PALLETDETECTIONRECONFIGURERECONFIGURATOR_H__
