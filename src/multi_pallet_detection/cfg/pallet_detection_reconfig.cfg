#!/usr/bin/env python
PACKAGE = 'multi_pallet_detection'
from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

# cut off parameters
grp_pointcloud_cutoff = gen.add_group("Cutoff_Param", type = "tab")
grp_pointcloud_cutoff.add("min_x_cutoff", double_t, 0, "min x distance (m)", -1.2, -2.0, 0.0)
grp_pointcloud_cutoff.add("max_x_cutoff", double_t, 0, "max x distance (m)", 1.2, 0.0, 2.0)
grp_pointcloud_cutoff.add("min_y_cutoff", double_t, 0, "min y distance (m)", 0.0, -0.8, 0.4)
grp_pointcloud_cutoff.add("max_y_cutoff", double_t, 0, "max y distance (m)", 2.0, 0.2, 2.0)
grp_pointcloud_cutoff.add("min_z_cutoff", double_t, 0, "min z distance (m)", 0.2, 0.0, 1.2)
grp_pointcloud_cutoff.add("max_z_cutoff", double_t, 0, "max z distance (m)", 1.7, 1.2, 3.5)
grp_pointcloud_cutoff.add("downsample_scale", int_t, 0, "downsample scale", 2, 1, 5)

# Floor remove
grp_floor_remove = gen.add_group("Floor_Remove", type = "tab")
grp_floor_remove.add("active_remove_floor", bool_t, 0, "remove floor or not", True)
grp_floor_remove.add("floor_distance_thresh", double_t, 0, "floor distance thresh", 0.03, 0.0, 1.0)

# Plane Segmentation
grp_plane_segmentation = gen.add_group("Plane_Segment", type = "tab")
grp_plane_segmentation.add("active_segment", bool_t, 0, "remove floor or not", True)
grp_plane_segmentation.add("opencv_show", bool_t, 0, "opencv show", False)
grp_plane_segmentation.add("min_cluster_size", int_t, 0, "min cluster size", 5000, 0, 10000)
grp_plane_segmentation.add("max_cluster_size", int_t, 0, "max cluster size", 100000, 10000, 1000000)
grp_plane_segmentation.add("neighbor_number", int_t, 0, "neighbor number", 100, 10, 200)
grp_plane_segmentation.add("smooth_thresh", double_t, 0, "angle (deg) smooth thresh", 10.0, 0.0, 20.0)
grp_plane_segmentation.add("curvature_thres", double_t, 0, "curvature thres", 5.0, 0.0, 20.0)
grp_plane_segmentation.add("k_search", int_t, 0, "k search", 50, 0, 500)

# Edge Detection
grp_edge_detection = gen.add_group("Edge_Detection", type = "tab")
grp_edge_detection.add("visualize_normal", bool_t, 0, "visualize normal", False)
grp_edge_detection.add("depth_discontinuation_threshold", double_t, 0, "depth discontinuation threshold", 0.005, 0.0, 0.1)
grp_edge_detection.add("max_search_neighbors", int_t, 0, "max search neighbors", 100, 0, 1000)
grp_edge_detection.add("use_nan_boundary", bool_t, 0, "use_nan_boundary", True)
grp_edge_detection.add("use_occluding", bool_t, 0, "use_occluding", True)
grp_edge_detection.add("use_occluded", bool_t, 0, "use_occluded", True)
grp_edge_detection.add("use_curvature", bool_t, 0, "use_curvature", True)
grp_edge_detection.add("use_rgb", bool_t, 0, "use_rgb", True)

# Template matching
grp_template_matching = gen.add_group("Template_matching", type = "tab")
grp_template_matching.add("template_matching_show", bool_t, 0, "show opencv template matching window", False)
grp_template_matching.add("match_method", int_t, 0, "match method", 0, 0, 4)
grp_template_matching.add("manual_scale", bool_t, 0, "manual scale set for template", False)
grp_template_matching.add("scale_par", double_t, 0, "manual set for scale parameter of template", 1.0, 0.1, 6.0)
grp_template_matching.add("min_scale", double_t, 0, "min scale of auto set scale mode", 0.9, 0.1, 1.0)
grp_template_matching.add("max_scale", double_t, 0, "max scale of auto set scale mode", 1.6, 1.1, 6.0)
grp_template_matching.add("thres", double_t, 0, "threshold", 1.5, 0.01, 10.0)
grp_template_matching.add("change_thres", double_t, 0, "optimal scale change threshold", 0.2, 0.1, 1.0)
grp_template_matching.add("scale_change_rate", double_t, 0, "scale change rate", 0.01, 0.01, 0.5)

exit(gen.generate(PACKAGE, "pallet_detection", "palletDetectionReconfigure"))